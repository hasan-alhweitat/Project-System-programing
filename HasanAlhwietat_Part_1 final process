#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <sys/wait.h>
#include <openssl/sha.h>
#include <string.h>
#include <fcntl.h>

#define SIZE_ARRAY 1000

void hashFunction(){
    unsigned char sha256_digest[SHA256_DIGEST_LENGTH];
    unsigned char *buffer;

    int fb = open("hash.text", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    const char *text = "Hasan";
    ssize_t bytes_written = write(fb, buffer, strlen(text));
    close(fb);

    int f2 = open("hash.text",O_RDONLY,0);
    buffer = malloc(1*sizeof(unsigned char));
    int j;
    while(j=read(f2, buffer, sizeof(buffer))>0){
        buffer=(unsigned char *)realloc(buffer,1+sizeof(buffer));
    }
    SHA256(buffer,strlen(buffer),sha256_digest);
    close(f2);
    int f3 = open("hashResult.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    char hash_result[SHA256_DIGEST_LENGTH * 2 + 1];
    hash_result[SHA256_DIGEST_LENGTH * 2] = '\0'; 
    
    for (int i = 0; i < SHA256_DIGEST_LENGTH; ++i) {
        sprintf(&hash_result[i * 2], "%02x", sha256_digest[i]);
    }

    ssize_t bytes_written_result = write(f3, hash_result, strlen(hash_result));
    close(f3);
    printf("Implement Hashing and stored in file hashResult.text");
    free(buffer);
}

void linearSearch(int arr[], int size, int key) {
    int count = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] == key) {
            count++;
        }
    }
    printf("Element frequency in linearSearch: %d\n", count);
}

void binarySearch(int arr[], int size, int key) {
    int low = 0, high = size - 1, mid, count = 0;
    while (low <= high) {
        mid = (low + high) / 2;
        if (arr[mid] == key) {
            count++;
            int left = mid - 1;
            while (left >= 0 && arr[left] == key) {
                count++;
                left--;
            }
            int right = mid + 1;
            while (right < size && arr[right] == key) {
                count++;
                right++;
            }
            break;
        } else if (arr[mid] < key) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    printf("Element frequency in Binary Search: %d\n", count);
}

void interpolationSearch(int arr[], int size, int key) {
    int low = 0, high = size - 1, count = 0;
    while (low <= high && key >= arr[low] && key <= arr[high]) {
        int pos = low + ((double)(high - low) / (arr[high] - arr[low])) * (key - arr[low]);
        if (arr[pos] == key) {
            count++;
            int left = pos - 1;
            while (left >= 0 && arr[left] == key) {
                count++;
                left--;
            }
            int right = pos + 1;
            while (right < size && arr[right] == key) {
                count++;
                right++;
            }
            break;
        } else if (arr[pos] < key) {
            low = pos + 1;
        } else {
            high = pos - 1;
        }
    }
    printf("Element frequency in interpolation Search: %d\n", count);
}

void exponentialSearch(int arr[], int size, int key) {
    int count = 0;
    if (arr[0] == key) {
        count++;
    }
    int i = 1;
    while (i < size && arr[i] <= key) {
        if (arr[i] == key) {
            count++;
        }
        i = i * 2;
    }
    int low = i / 2;
    int high = (i < size) ? i : size - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == key) {
            count++;
            int left = mid - 1;
            while (left >= 0 && arr[left] == key) {
                count++;
                left--;
            }
            int right = mid + 1;
            while (right < size && arr[right] == key) {
                count++;
                right++;
            }
            break;
        } else if (arr[mid] < key) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    printf("Element frequency in exponentialSearch: %d\n", count);
}

void bubbleSort(int arr[], int size, const char *fileBubbleSort) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    
    int fb = open(fileBubbleSort, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fb == -1) {
        perror("Unable to open file");
        exit(1);
    }
    for (int i = 0; i < SIZE_ARRAY; i++) {
        char buffer[SIZE_ARRAY]; 
        int length = snprintf(buffer, sizeof(buffer), "%d ", arr[i]);
        write(fb, buffer, length);
    }
    close(fb);
}

void selectionSort(int arr[], int size, const char *fileSelectionSort) {
    for (int i = 0; i < size - 1; i++) {
        int min_index = i;
        for (int j = i + 1; j < size; j++) {
            if (arr[j] < arr[min_index]) {
                min_index = j;
            }
        }
        int temp = arr[i];
        arr[i] = arr[min_index];
        arr[min_index] = temp;
    }

    int fb = open(fileSelectionSort, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fb == -1) {
        perror("Unable to open file");
        exit(1);
    }
    for (int i = 0; i < SIZE_ARRAY; i++) {
        char buffer[SIZE_ARRAY]; 
        int length = snprintf(buffer, sizeof(buffer), "%d ", arr[i]);
        write(fb, buffer, length);
    }
    close(fb);
}

void insertionSort(int arr[], int size, const char *fileInsertionSort) {
    int i, key, j;
    for (i = 1; i < size; i++) {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
    int fb = open(fileInsertionSort, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fb == -1) {
        perror("Unable to open file");
        exit(1);
    }
    for (int i = 0; i < SIZE_ARRAY; i++) {
        char buffer[SIZE_ARRAY]; 
        int length = snprintf(buffer, sizeof(buffer), "%d ", arr[i]);
        write(fb, buffer, length);
    }
    close(fb);
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);
    
    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return (i + 1);
}

void quickSort(int arr[], int low, int high, const char *fileQuickSort) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1, fileQuickSort);
        quickSort(arr, pi + 1, high, fileQuickSort);
    }
    if (low == 0 && high == SIZE_ARRAY - 1) {
        int fb = open(fileQuickSort, O_WRONLY | O_CREAT | O_TRUNC, 0644);
        if (fb == -1) {
            perror("Unable to open file");
            exit(1);
        }
        for (int i = 0; i < SIZE_ARRAY; i++) {
            char buffer[SIZE_ARRAY]; 
            int length = snprintf(buffer, sizeof(buffer), "%d ", arr[i]);
            write(fb, buffer, length);
        }
        close(fb);
    }
}

int main() {
    clock_t start1 = clock();
    int arr[SIZE_ARRAY], size = SIZE_ARRAY, key = 55;
    int pipe_s1[2],pipe_s2[2],pipe_s3[2],pipe_s4[2],pipe_s5[2],pipe_s6[2],pipe_s7[2],pipe_s8[2];
    
    if (pipe(pipe_s1) == -1 || pipe(pipe_s2) == -1 || pipe(pipe_s3) == -1  || pipe(pipe_s4) == -1 || pipe(pipe_s5) == -1 || pipe(pipe_s6) == -1 || pipe(pipe_s7) == -1 || pipe(pipe_s8) == -1) {
        perror("Pipe creation failed");
        return 1;
    }
    
    pid_t pid = fork();
    if (pid == 0) {
        clock_t start = clock();
        hashFunction();
        clock_t end = clock();
        printf("\nExecution time for hash function: %.10f seconds\n\n", (double)(end - start) / CLOCKS_PER_SEC);
        exit(0);
    } else {
        wait(NULL);
        pid_t pid_1 = fork();
        if (pid_1 == 0) {
            clock_t start = clock();
            srand(time(NULL));
            for (int i = 0; i < size; i++) {
                arr[i] = rand() % 100;
            }
        
            write(pipe_s1[1], arr, sizeof(arr));
            write(pipe_s2[1], arr, sizeof(arr));
            write(pipe_s3[1], arr, sizeof(arr));
            write(pipe_s4[1], arr, sizeof(arr));
            close(pipe_s1[1]);
            close(pipe_s2[1]);
            close(pipe_s3[1]);
            close(pipe_s4[1]);
        
            bubbleSort(arr, size, "bubble_sort.txt");
            write(pipe_s5[1], arr, sizeof(arr));
            close(pipe_s5[1]);
            write(pipe_s6[1], arr, sizeof(arr));
            close(pipe_s6[1]);
            write(pipe_s7[1], arr, sizeof(arr));
            close(pipe_s7[1]);
            write(pipe_s8[1], arr, sizeof(arr));
            close(pipe_s8[1]);
            clock_t end = clock();
            printf("\nExecution time for Generate array random: %.10f seconds\n\n", (double)(end - start) / CLOCKS_PER_SEC);
            exit(0);
        } else {
            wait(NULL);
            pid_t pid_sort1 = fork();
            if (pid_sort1 == 0) {
                clock_t start = clock(); 
                read(pipe_s1[0], arr, sizeof(arr));
                close(pipe_s1[0]);
                bubbleSort(arr, size, "bubble_sort.txt");
                printf("\nSorted array using Bubble Sort and stored in bubble_sort.txt");
                clock_t end = clock();
                printf("\nExecution time for Bubble Sort: %.10f seconds\n\n", (double)(end - start) / CLOCKS_PER_SEC);        
                exit(0);
            } else {
                wait(NULL);
                pid_t pid_sort2 = fork();
                if (pid_sort2 == 0) {
                    clock_t start = clock(); 
                    read(pipe_s2[0], arr, sizeof(arr));
                    close(pipe_s2[0]);
                    selectionSort(arr, size, "selection_sort.txt");
                    printf("\nSorted array using Selection Sort and stored in selection_sort.txt");
                    clock_t end = clock();
                    printf("\nExecution time for Selection Sort: %.10f seconds\n\n", (double)(end - start) / CLOCKS_PER_SEC);
                    exit(0);
                } else {
                    wait(NULL);
                    pid_t pid_sort3 = fork();
                    if (pid_sort3 == 0) {
                        clock_t start = clock(); 
                        read(pipe_s3[0], arr, sizeof(arr));
                        close(pipe_s3[0]);
                        insertionSort(arr, size, "insertion_sort.txt");
                        printf("\nSorted array using Insertion Sort and stored in insertion_sort.txt");
                        clock_t end = clock();
                        printf("\nExecution time for Insertion Sort: %.10f seconds\n\n", (double)(end - start) / CLOCKS_PER_SEC); 
                        exit(0);
                    } else {
                        wait(NULL);
                        pid_t pid_sort4 = fork();
                        if (pid_sort4 == 0) {
                            clock_t start = clock(); 
                            read(pipe_s4[0], arr, sizeof(arr));
                            close(pipe_s4[0]);
                            quickSort(arr, 0, size - 1, "quick_sort.txt");
                            printf("\nSorted array using Quick Sort and stored in quick_sort.txt");
                            clock_t end = clock();
                            printf("\nExecution time for Quick Sort: %.10f seconds\n\n", (double)(end - start) / CLOCKS_PER_SEC);
                            exit(0);
                        } else {
                            wait(NULL);
                            pid_t pid_search1 = fork();
                            if (pid_search1 == 0) {
                                clock_t start = clock();
                                read(pipe_s5[0], arr, sizeof(arr));
                                close(pipe_s5[0]);
                                printf("\nSearching for key %d using Linear Search...\n", key);
                                linearSearch(arr, size, key);
                                clock_t end = clock();
                                printf("Execution time for Linear Search: %.10f seconds\n\n", (double)(end - start) / CLOCKS_PER_SEC);
                                exit(0);
                            } else {
                                wait(NULL);
                                pid_t pid_search2 = fork();
                                if (pid_search2 == 0) {
                                    clock_t start = clock();
                                    read(pipe_s6[0], arr, sizeof(arr));
                                    close(pipe_s6[0]);
                                    printf("\nSearching for key %d using Binary Search...\n", key);
                                    binarySearch(arr, size, key);
                                    clock_t end = clock();
                                    printf("Execution time for Binary Search: %.10f seconds\n\n", (double)(end - start) / CLOCKS_PER_SEC);
                                    exit(0);
                                } else {
                                    wait(NULL);
                                    pid_t pid_search3 = fork();
                                    if (pid_search3 == 0) {
                                        clock_t start = clock();
                                        read(pipe_s7[0], arr, sizeof(arr));
                                        close(pipe_s7[0]);
                                        printf("\nSearching for key %d using Interpolation Search...\n", key);
                                        interpolationSearch(arr, size, key);
                                        clock_t end = clock();
                                        printf("Execution time for Interpolation Search: %.10f seconds\n\n", (double)(end - start) / CLOCKS_PER_SEC);
                                        exit(0);
                                    } else{
                                        wait(NULL);
                                        clock_t start = clock();
                                        read(pipe_s8[0], arr, sizeof(arr));
                                        close(pipe_s8[0]);
                                        printf("\nSearching for key %d using Exponential Search...\n", key);
                                        exponentialSearch(arr, size, key);
                                        clock_t end = clock();
                                        printf("Execution time for Exponential Search: %.10f seconds\n\n", (double)(end - start) / CLOCKS_PER_SEC);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    clock_t end1 = clock();
    printf("\nExecution time All programm: %.10f seconds\n", (double)(end1 - start1) / CLOCKS_PER_SEC);
    return 0;
}